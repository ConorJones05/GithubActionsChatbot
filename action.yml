name: "SaaS Debuging"
description: "Sends the failed build to AI"
inputs:
  api_key:
    description: "Please input your API key"
    required: true
  api_url:
    description: "Please input your debuging API key"
    required: true
    default: "https://githubactionschatbot.onrender.com"
  

runs:
  using: "composite"
  steps:
    - name: Check and prepare build script
      shell: bash
      run: |
        if [ ! -f "./build_script.sh" ]; then
          echo "Creating build_script.sh as it does not exist"
          echo "#!/bin/bash" > build_script.sh
          echo "echo 'This is a placeholder build script'" >> build_script.sh
        fi
        chmod +x ./build_script.sh

    - name: Capture the Logs
      shell: bash
      run: | 
        echo "Your build failed, capturing logs..." 
        mkdir -p logs
        ./build_script.sh > logs/build.log 2>&1 || true
    
    # - name: Checkout the Client repo
    #   using: actions/checkout@v2
    #   with:
    #     repository: ${{ inputs.github-url }}
    #     token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Code Context
      shell: bash
      run: |
        mkdir -p code_context
        # Extract file paths and line numbers from logs
        grep -o 'File "[^"]*", line [0-9]*' logs/build.log | while read -r match; do
          file_path=$(echo "$match" | grep -o 'File "[^"]*"' | sed 's/File "//;s/"$//')
          line_num=$(echo "$match" | grep -o 'line [0-9]*' | sed 's/line //')[^:]+:[0-9]+' logs/build.log | while read -r match; do
          # Try different patterns to extract file path and line number
          if [ -f "$file_path" ]; then^\"]+)\",\ line\ ([0-9]+) ]]; then
            # Extract context (3 lines before and after the error line)
            start_line=$((line_num - 3))"
            if [ $start_line -lt 1; then start_line=1; fi; then
            end_line=$((line_num + 3))1]}"
            line_num="${BASH_REMATCH[2]}"
            # Create a unique filename for this snippet+) ]]; then
            snippet_name=$(echo "$file_path" | sed 's/\//_/g')
            echo "FILE: $file_path, LINE: $line_num" > "code_context/${snippet_name}_${line_num}.txt"
            sed -n "${start_line},${end_line}p" "$file_path" >> "code_context/${snippet_name}_${line_num}.txt"
          fi# Fall back to original pattern
        done || trueh=$(echo "$match" | grep -o 'File "[^"]*"' | sed 's/File "//;s/"$//')
            line_num=$(echo "$match" | grep -o 'line [0-9]*' | sed 's/line //')
            
    - name: Send to API
      shell: bash
      run: |
        # Ensure logs directory and file exist
        mkdir -p logs the exact path
        touch logs/build.logh" ]; then
            echo "File exists at exact path, extracting context..."
        # Prepare code context datanes before and after the error line for better context)
        CODE_CONTEXT=""$((line_num - 5))
        if [ -d "code_context" ] && [ "$(ls -A code_context 2>/dev/null)" ]; then
          echo "Preparing code context from $(ls code_context | wc -l) files..."
          for snippet in code_context/*; do
            # Use base64 encoding to prevent escaping issuesCreate a unique filename for this snippet
            snippet_content=$(cat "$snippet" | base64 -w 0)  snippet_name=$(echo "$file_path" | sed 's/[\/\\:]/_/g')
            CODE_CONTEXT="${CODE_CONTEXT}===FILE_SEPARATOR===\n${snippet_content}\n"    echo "FILE: $file_path, LINE: $line_num" > "code_context/${snippet_name}_${line_num}.txt"
          done_context/${snippet_name}_${line_num}.txt"
        else
          echo "No code context files found"
        fi            echo "File not found at $file_path, searching in repository..."
        tory
        # Escape the logs properlybasename "$file_path")
        LOGS=$(cat logs/build.log | tr '\n' ' ' | sed 's/"/\\"/g')$(find . -type f -name "$base_name" | head -1)


















        echo "::endgroup::"        echo "$RESPONSE"        echo "::group::Here is a method to fix your build"        fi          echo "cURL error: $RESPONSE"          echo "Error sending data to API: $CURL_STATUS"        if [ $CURL_STATUS -ne 0 ]; then        CURL_STATUS=$?                    "${{ inputs.api_url }}" 2>&1)          -d "$REQUEST_DATA" \        RESPONSE=$(curl -X POST -H "Content-Type: application/json" \        echo "Sending data to API..."                REQUEST_DATA="{\"api_key\": \"${{ inputs.api_key }}\", \"logs\": \"$LOGS\", \"code_context\": \"$CODE_CONTEXT\", \"format\": \"base64\"}"        # Encode the request to avoid JSON escaping issues                    
            if [ -n "$potential_file" ] && [ -f "$potential_file" ]; then
              echo "Found potential match: $potential_file"








        # Ensure logs directory and file exist      run: |      shell: bash    - name: Send to API


        ls -la code_context/ || echo "No context files were created"        echo "Extracted code context files:"
        # List extracted context files                done || true          fi            fi              start_line=$((line_num - 5))



              echo "Warning: Could not find file '$file_path' or any matching files"            else              echo "Context extracted from potential match"              if [ $start_line -lt 1 ]; then start_line=1; fi

              sed -n "${start_line},${end_line}p" "$potential_file" >> "code_context/${snippet_name}_${line_num}.txt"              end_line=$((line_num + 5))

              echo "FILE: $potential_file, LINE: $line_num" > "code_context/${snippet_name}_${line_num}.txt"
              snippet_name=$(echo "$potential_file" | sed 's/[\/\\:]/_/g')              